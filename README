Name: John
Surname: Korniotakis
A.M.: 3208


My implementation is actually simple and mostly revolves around how I implemented the EAS/RSA encryption/decryption functions.

EAS ENCRYPTION/DECRYPTION:
In the case of EAS encryption things are really simple. Having read the AES key from the proper file, I use the proper functions from evp.h and the AES key to encrypt/decrypt the given message.

RSA ENCRYPTION/DECRYPTION:
In the case of RSA encryption/decryption things get a little bit more complicated.RSA can encrypt/decrypt 256 bytes at a time. I use the PKCS1 padding which can be 11 bytes minimum, which means that the plaintext can be max 245 bytes (because 245+11=256). So if I have a plaintext that is more than245 bytes, it will need to be encrypted one block at a time ( with each block being 245 bytes). Every time a block is encrypted I use memcpy() to concatenate it to the rest of the ciphertext. The same goes for decryption, with the difference being that a block of 256 bytes will be decrypted at a time.

The client/server implementation does not actually need explaining since I follow the algorithm given in the exercise (order of sending messages 
and key exchange protocol).




BONUS:

1)Initialization Vector (IV) implementation for AES-CBC

3 rules must be followed in order to implement the IV:
1st rule: Since we are using 128-bit AES the IV must be 128 bits/8=16 bytes in size.

2nd rule: The same IV must not be predictable, thus we can use a 16 char buffer and generate a random capital letter or number for each buffer 
	  entry.

3rd rule: The same IV must not be used for different messages encrypted by the same key.

The 3rd rule is not mandatory for the purpose of this exercise (since we only send 1 message encrypted by the AES key to the server).

I implemented the generateIV() method in the crypto.h which generates a random IV for ECB-128 bit mode.

